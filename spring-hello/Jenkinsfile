pipeline {
    agent any

    environment {
        TEST_CONTAINER_NAME = "spring-hello-container"
        TEST_PORT_MAPPING = "9090:8086"
        IMAGE_NAME = "spring-hello"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/KeanVTC/springboot-ci-demo.git'
            }
        }

        stage('Build App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                bat """
                docker rm -f %TEST_CONTAINER_NAME% || echo Container not present
                docker run -d --name %TEST_CONTAINER_NAME% -p %TEST_PORT_MAPPING% %IMAGE_NAME%
                """
                sleep time: 20, unit: 'SECONDS'
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello/playwright') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npx playwright test --reporter=html'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker stop %TEST_CONTAINER_NAME%"
            }
        }

        stage('Deploy to Production') {
            when {
                expression { currentBuild.currentResult == 'SUCCESS' }
            }
            steps {
                echo "‚úÖ Ready to deploy!"
                // Add your real deployment steps here
            }
        }
    }

    post {
        always {
            echo 'üì¶ CI/CD Pipeline completed.'
            echo 'üìÅ Archiving Playwright HTML report...'
            archiveArtifacts artifacts: 'spring-hello/playwright-tests/playwright-report/**', allowEmptyArchive: true
        }

        success {
            echo '‚úÖ Pipeline succeeded.'
        }

        failure {
            echo '‚ùå Pipeline failed: Tests failed or deployment error.'
        }

        cleanup {
            echo '‚õî Cleaning up test container...'
            bat "docker rm -f %TEST_CONTAINER_NAME% || echo Already removed"
        }

        // Publish HTML test report
        always {
            publishHTML(target: [
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'spring-hello/playwright-tests/playwright-report',
                reportFiles: 'index.html',
                reportName: 'Playwright Test Report'
            ])
        }
    }
}
