pipeline {
    agent any

    environment {
        IMAGE_NAME = 'spring-hello'
        CONTAINER_NAME = 'spring-hello-container'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                echo "Starting test container ${CONTAINER_NAME} on port ${TEST_PORT}..."
                dir('spring-hello') {
                    script {
                        def containerExists = bat(script: "docker ps -a -q -f name=${CONTAINER_NAME}", returnStdout: true).trim()
                        if (containerExists == "") {
                            echo "Test container doesn't exist. Creating..."
                            bat "docker build -t ${IMAGE_NAME} ."
                            bat "docker run -d -p ${TEST_PORT}:8086 --name ${CONTAINER_NAME} ${IMAGE_NAME}"
                        } else {
                            echo "Container exists. Starting..."
                            bat "docker start ${CONTAINER_NAME}"
                        }
                    }
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    bat 'npm ci'
                }
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello') {
                    bat 'npx playwright test'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "Stopping test container..."
                bat "docker stop ${CONTAINER_NAME}"
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "Deploying to production on port ${PROD_PORT}..."
                script {
                    def prodContainerId = bat(script: "docker ps -aqf name=prod-${CONTAINER_NAME}", returnStdout: true).trim()
                    if (prodContainerId != "") {
                        echo "Stopping and removing existing production container..."
                        bat "docker stop prod-${CONTAINER_NAME}"
                        bat "docker rm prod-${CONTAINER_NAME}"
                    }
                    echo "Starting new production container..."
                    dir('spring-hello') {
                        bat "docker build -t ${IMAGE_NAME} ."
                        bat "docker run -d -p ${PROD_PORT}:8086 --name prod-${CONTAINER_NAME} ${IMAGE_NAME}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üì¶ CI/CD Pipeline completed."
        }
        failure {
            echo "‚ùå Pipeline failed: Tests failed or deployment error."
            echo "‚õî Cleaning up test container..."
            bat script: "docker stop ${CONTAINER_NAME}", returnStatus: true
        }
    }
}
