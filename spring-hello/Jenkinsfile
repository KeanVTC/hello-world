pipeline {
    agent any

    environment {
        IMAGE_NAME = 'spring-hello-image'
        TEST_CONTAINER = 'spring-hello-test'
        PROD_CONTAINER = 'spring-hello-prod'
        INTERNAL_PORT = '8080'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/KeanVTC/springboot-ci-demo.git'
            }
        }

        stage('Build Spring Boot JAR') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('spring-hello') {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Start Test Container') {
            steps {
                bat """
                docker rm -f ${TEST_CONTAINER} || echo No container to remove
                docker run -d --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} ${IMAGE_NAME}
                """
                sleep time: 20, unit: 'SECONDS'
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npx playwright test --reporter=html'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker stop ${TEST_CONTAINER}"
                bat "docker rm ${TEST_CONTAINER}"
            }
        }

        stage('Deploy to Production') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    def exists = bat(script: "docker ps -a -q -f name=${PROD_CONTAINER}", returnStdout: true).trim()
                    if (exists) {
                        bat "docker stop ${PROD_CONTAINER}"
                        bat "docker rm ${PROD_CONTAINER}"
                    }
                }
                bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} ${IMAGE_NAME}"
            }
        }
    }

    post {
        always {
            echo "üì¶ Pipeline completed."
            archiveArtifacts artifacts: 'spring-hello/playwright-tests/playwright-report/**', allowEmptyArchive: true
            publishHTML(target: [
                reportDir: 'spring-hello/playwright-tests/playwright-report',
                reportFiles: 'index.html',
                reportName: 'Playwright Test Report',
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true
            ])
        }
        success {
            echo '‚úÖ Build + Test + Deploy Successful!'
        }
        failure {
            echo '‚ùå Something failed. Clean-up and check logs.'
        }
    }
}
