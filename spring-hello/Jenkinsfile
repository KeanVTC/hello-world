pipeline {
    agent any

    environment {
        TEST_CONTAINER = 'spring-hello-container'
        PROD_CONTAINER = 'spring-prod-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
        BASE_TEST_URL = "http://localhost:${TEST_PORT}"
        BASE_PROD_URL = "http://localhost:${PROD_PORT}"
        PLAYWRIGHT_TEST_DIR = 'spring-hello/playwright-tests'
        CUSTOM_REPORT_DIR = "${PLAYWRIGHT_TEST_DIR}/custom-report"
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    echo "üì¶ Building Spring Boot application..."
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                script {
                    echo "üê≥ Starting test container..."
                    def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker start ${TEST_CONTAINER}"
                        echo "‚úÖ Reused existing test container."
                    } else {
                        dir('spring-hello') {
                            bat "docker build -t spring-hello:latest ."
                        }
                        bat "docker create --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} spring-hello:latest"
                        bat "docker start ${TEST_CONTAINER}"
                        echo "üöÄ New test container started."
                    }
                    sleep time: 20, unit: 'SECONDS'
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    echo "üß™ Installing Playwright..."
                    bat 'npm ci'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Tests (Test Container)') {
            steps {
                dir(PLAYWRIGHT_TEST_DIR) {
                    echo "üö¶ Running Playwright E2E tests (Test Container)..."
                    script {
                        env.BASE_URL = BASE_TEST_URL
                        env.REPORT_TITLE = "Test Report"
                        def testStatus = bat(
                            script: """
                                set BASE_URL=${env.BASE_URL}
                                set REPORT_TITLE=${env.REPORT_TITLE}
                                npx playwright test --project=chromium --project=firefox --project=webkit
                            """,
                            returnStatus: true
                        )
                        if (testStatus != 0) {
                            error("‚ùå Playwright test against test container failed.")
                        }
                    }
                }
            }
        }

        stage('Archive Test Report') {
            steps {
                script {
                    echo "üìÇ Archiving Test container custom report..."
                    def ts = new Date().format("yyyyMMdd-HHmmss")
                    bat "xcopy /E /I /Y \"${CUSTOM_REPORT_DIR}\" \"${PLAYWRIGHT_TEST_DIR}\\custom-report-test-${ts}\""
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                echo "üìä Publishing Playwright custom test report..."
                publishHTML(target: [
                    reportDir: CUSTOM_REPORT_DIR,
                    reportFiles: 'report.html',
                    reportName: 'Playwright Custom Report - Test Container',
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "üõë Stopping test container..."
                script {
                    def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker stop ${TEST_CONTAINER}"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "üöÄ Deploying to production..."
                script {
                    def exists = bat(script: "docker inspect --type container ${PROD_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker stop ${PROD_CONTAINER}"
                        bat "docker rm ${PROD_CONTAINER}"
                    }
                    bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} spring-hello:latest"
                    sleep time: 15, unit: 'SECONDS'
                }
            }
        }

        stage('Run E2E Tests (Production)') {
            steps {
                dir(PLAYWRIGHT_TEST_DIR) {
                    echo "üö¶ Running Playwright E2E tests (Production)..."
                    script {
                        env.BASE_URL = BASE_PROD_URL
                        env.REPORT_TITLE = "Production Report"
                        def prodTestStatus = bat(
                            script: """
                                set BASE_URL=${env.BASE_URL}
                                set REPORT_TITLE=${env.REPORT_TITLE}
                                npx playwright test --project=chromium --project=firefox --project=webkit
                            """,
                            returnStatus: true
                        )
                        if (prodTestStatus != 0) {
                            error("‚ùå Playwright test against production failed.")
                        }
                    }
                }
            }
        }

        stage('Archive Production Report') {
            steps {
                script {
                    echo "üìÇ Archiving Production custom report..."
                    def ts = new Date().format("yyyyMMdd-HHmmss")
                    bat "xcopy /E /I /Y \"${CUSTOM_REPORT_DIR}\" \"${PLAYWRIGHT_TEST_DIR}\\custom-report-prod-${ts}\""
                }
            }
        }

        stage('Publish Production Report') {
            steps {
                echo "üìä Publishing Playwright custom production report..."
                publishHTML(target: [
                    reportDir: CUSTOM_REPORT_DIR,
                    reportFiles: 'report.html',
                    reportName: 'Playwright Custom Report - Production',
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline SUCCESS: App deployed and E2E tested."
        }
        failure {
            echo "‚ùå Pipeline FAILED. Attempting cleanup..."
            script {
                def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                if (exists == 0) {
                    bat "docker stop ${TEST_CONTAINER}"
                }
            }
        }
        always {
            echo "üì¶ CI/CD pipeline complete."
        }
    }
}
