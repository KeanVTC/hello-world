pipeline {
    agent any

    environment {
        MAVEN_HOME = tool 'Maven' // Set to the name you configured in Jenkins
        JAVA_HOME = tool name: 'JDK17', type: 'jdk' // Adjust if using different name
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${env.PATH}"
        IMAGE_NAME = 'spring-hello-image'
        TEST_CONTAINER_NAME = 'spring-hello-container'
        PROD_CONTAINER_NAME = 'spring-hello-prod'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
        APP_PORT = '8086'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                dir('spring-hello') {
                    bat "mvn clean package"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('spring-hello') {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Run Test Container') {
            steps {
                bat "docker run -d -p ${TEST_PORT}:${APP_PORT} --name ${TEST_CONTAINER_NAME} ${IMAGE_NAME}"
                bat 'timeout /t 20' // Wait for app to be ready
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npm ci'
                    bat "npx playwright test --config=playwright.config.js"
                }
            }
        }

        stage('Verify Test Report') {
            steps {
                dir('spring-hello/playwright-tests') {
                    script {
                        def result = bat(script: 'npx playwright show-report --quiet', returnStatus: true)
                        if (result != 0) {
                            error('Playwright tests failed.')
                        }
                    }
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                script {
                    bat "docker stop ${TEST_CONTAINER_NAME} || exit 0"
                    bat "docker rm ${TEST_CONTAINER_NAME} || exit 0"
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    bat "docker stop ${PROD_CONTAINER_NAME} || exit 0"
                    bat "docker rm ${PROD_CONTAINER_NAME} || exit 0"
                    bat "docker run -d -p ${PROD_PORT}:${APP_PORT} --name ${PROD_CONTAINER_NAME} ${IMAGE_NAME}"
                }
            }
        }
    }

    post {
        always {
            echo "üì¶ CI/CD Pipeline completed."
        }
        failure {
            echo "‚ùå Pipeline failed: Tests failed or deployment error."
            echo "‚õî Cleaning up test container (if running)..."
            script {
                bat "docker stop ${TEST_CONTAINER_NAME} || exit 0"
                bat "docker rm ${TEST_CONTAINER_NAME} || exit 0"
            }
        }
    }
}
