pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'spring-hello-image'
        CONTAINER_NAME = 'spring-hello-container'
        HOST_PORT = '9090'             // production port (host)
        CONTAINER_PORT = '8086'        // container's exposed port
        BASE_URL = "http://localhost:${HOST_PORT}"
        REPORT_DIR = 'spring-hello/playwright-tests/playwright-report'
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/KeanVTC/springboot-ci-demo'
            }
        }

        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('spring-hello') {
                    bat "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Test Container') {
            steps {
                bat "docker run -d -p ${HOST_PORT}:${CONTAINER_PORT} --name ${CONTAINER_NAME} ${DOCKER_IMAGE}"
            }
        }

        stage('Health Check') {
            steps {
                bat """
                echo Checking if Spring Boot app is up...
                for /l %%i in (1,1,10) do (
                    curl -s ${BASE_URL}/ && exit /b 0
                    timeout /t 3 >nul
                )
                exit /b 1
                """
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    bat 'npm ci'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run Playwright Tests') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npx playwright test --reporter html'
                }
            }
        }

        stage('Publish Playwright Report') {
            when {
                expression { fileExists("${REPORT_DIR}/index.html") }
            }
            steps {
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "${REPORT_DIR}",
                    reportFiles: 'index.html',
                    reportName: 'Playwright Report'
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker stop ${CONTAINER_NAME} || exit 0"
                bat "docker rm ${CONTAINER_NAME} || exit 0"
            }
        }

        stage('Deploy to Production') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo "üöÄ Deploying to production (port 9090)..."
                // Add deployment steps here if needed
            }
        }
    }

    post {
        failure {
            echo '‚ùå Pipeline failed. Cleaning up...'
            bat "docker stop ${CONTAINER_NAME} || exit 0"
            bat "docker rm ${CONTAINER_NAME} || exit 0"
        }
        always {
            echo '‚úÖ Pipeline completed.'
        }
    }
}
