pipeline {
    agent any

    environment {
        TEST_CONTAINER = 'spring-hello-container'
        PROD_CONTAINER = 'spring-prod-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                echo "üîç Checking and starting test container ${TEST_CONTAINER} on port ${TEST_PORT}..."
                script {
                    def existsStatus = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (existsStatus == 0) {
                        echo "‚úÖ Test container exists. Starting..."
                        bat "docker start ${TEST_CONTAINER}"
                    } else {
                        echo "‚ö†Ô∏è Test container not found. Building image and creating new container..."
                        dir('spring-hello') {
                            bat "docker build -t spring-hello:latest ."
                        }
                        bat "docker create --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} spring-hello:latest"
                        bat "docker start ${TEST_CONTAINER}"
                    }
                    sleep time: 20, unit: 'SECONDS'
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello/playwright') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npx playwright test'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "üõë Stopping test container ${TEST_CONTAINER}..."
                script {
                    def existsStatus = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (existsStatus == 0) {
                        bat "docker stop ${TEST_CONTAINER}"
                    } else {
                        echo "No test container found to stop."
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "üöÄ Deploying to production container ${PROD_CONTAINER} (port ${PROD_PORT}:${INTERNAL_PORT})..."
                script {
                    def existsStatus = bat(script: "docker inspect --type container ${PROD_CONTAINER}", returnStatus: true)
                    if (existsStatus == 0) {
                        echo "üßπ Removing existing production container..."
                        bat "docker stop ${PROD_CONTAINER}"
                        bat "docker rm ${PROD_CONTAINER}"
                    }
                }
                bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} spring-hello:latest"
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline passed: Tests succeeded and app deployed to port ${PROD_PORT}."
        }
        failure {
            echo "‚ùå Pipeline failed: Tests failed or deployment error."
            echo "‚õî Cleaning up test container if needed..."
            script {
                def existsStatus = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                if (existsStatus == 0) {
                    bat "docker stop ${TEST_CONTAINER}"
                } else {
                    echo "No test container found to stop."
                }
            }
        }
        always {
            echo 'üì¶ CI/CD Pipeline completed.'
        }
    }
}
