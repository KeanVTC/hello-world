pipeline {
    agent any

    environment {
        APP_NAME = "spring-hello"
        IMAGE_NAME = "spring-hello-image"
        CONTAINER_NAME = "spring-hello-container"
        TEST_PORT = "8086"
        PROD_PORT = "9090"
        TEST_URL = "http://localhost:${TEST_PORT}/hello"
        REPORT_DIR = "spring-hello/playwright-tests/playwright-report"
    }

    stages {
        stage('Checkout App Code') {
            steps {
                dir('spring-hello') {
                    git url: 'https://github.com/KeanVTC/springboot-ci-demo.git', branch: 'master'
                }
            }
        }

        stage('Build App') {
            steps {
                dir('spring-hello') {
                    bat "mvn clean package -DskipTests"
                }
            }
        }

        stage('Start Test Container') {
            steps {
                dir('spring-hello') {
                    bat """
                        docker rm -f ${CONTAINER_NAME} || echo Already removed
                        docker build -t ${IMAGE_NAME} .
                        docker run -d -p ${TEST_PORT}:8080 --name ${CONTAINER_NAME} ${IMAGE_NAME}
                        timeout 30 curl --retry 5 --retry-delay 5 --retry-connrefused ${TEST_URL}
                    """
                }
            }
        }

        stage('Checkout Playwright Tests') {
            steps {
                dir('spring-hello/playwright-tests') {
                    git url: 'https://github.com/KeanVTC/hello-world.git', branch: 'main'
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat "npm install"
                }
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat "npx playwright test --reporter=html"
                }
            }
        }

        stage('Archive Test Report') {
            steps {
                publishHTML(target: [
                    reportDir: "${REPORT_DIR}",
                    reportFiles: 'index.html',
                    reportName: 'Playwright Report',
                    keepAll: true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker rm -f ${CONTAINER_NAME} || echo Already removed"
            }
        }

        stage('Deploy to Production') {
            steps {
                dir('spring-hello') {
                    bat """
                        docker rm -f ${CONTAINER_NAME}-prod || echo Already removed
                        docker run -d -p ${PROD_PORT}:8080 --name ${CONTAINER_NAME}-prod ${IMAGE_NAME}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'üì¶ CI/CD Pipeline completed.'
            echo '‚õî Cleaning up test container...'
            bat "docker rm -f ${CONTAINER_NAME} || echo Already removed"
        }
        failure {
            echo '‚ùå Pipeline failed: Tests failed or deployment error.'
        }
    }
}
