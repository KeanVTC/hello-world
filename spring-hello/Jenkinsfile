pipeline {
    agent any

    environment {
        APP_NAME = 'spring-hello'
        IMAGE_NAME = "${APP_NAME}-image"
        TEST_CONTAINER = "${APP_NAME}-container"
        PROD_CONTAINER = "${APP_NAME}-prod"
        TEST_PORT = '9090'
        PROD_PORT = '9091'
        INTERNAL_PORT = '8086'
        REPORT_DIR = "${WORKSPACE}/playwright-tests/playwright-report"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/KeanVTC/springboot-ci-demo'
            }
        }

        stage('Build with Maven') {
            steps {
                dir("${APP_NAME}") {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${APP_NAME}") {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Run Test Container') {
            steps {
                bat "docker run -d --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} ${IMAGE_NAME}"
                sleep 10
            }
        }

        stage('Health Check') {
            steps {
                script {
                    def result = bat(script: "curl -s -o nul -w \"%{http_code}\" http://localhost:${TEST_PORT}", returnStdout: true).trim()
                    if (result != '200') {
                        error("❌ Health check failed with status: ${result}")
                    }
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir("${APP_NAME}/playwright-tests") {
                    bat 'npm ci'
                }
            }
        }

        stage('Run Playwright Tests') {
            steps {
                dir("${APP_NAME}/playwright-tests") {
                    bat "npx playwright test --reporter html"
                }
            }
        }

        stage('Publish Playwright Report') {
            steps {
                publishHTML([
                    reportDir: 'spring-hello/playwright-tests/playwright-report',
                    reportFiles: 'index.html',
                    reportName: 'Playwright Test Report'
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker stop ${TEST_CONTAINER} || exit 0"
                bat "docker rm ${TEST_CONTAINER} || exit 0"
            }
        }

        stage('Deploy to Production') {
            steps {
                bat "docker stop ${PROD_CONTAINER} || exit 0"
                bat "docker rm ${PROD_CONTAINER} || exit 0"
                bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} ${IMAGE_NAME}"
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline failed. Cleaning up...'
            bat "docker stop ${TEST_CONTAINER} || exit 0"
            bat "docker rm ${TEST_CONTAINER} || exit 0"
        }
    }
}
