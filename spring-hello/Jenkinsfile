pipeline {
    agent any

    environment {
        CONTAINER_NAME = 'spring-hello-container'
        PROD_CONTAINER_NAME = 'spring-prod-container'
        TEST_PORT = '8086'
        PROD_PORT = '9091'
        JAR_NAME = 'springboot-ci-demo-0.0.1-SNAPSHOT.jar'
        IMAGE_NAME = 'springboot-ci-demo'
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Existing Container') {
            steps {
                echo "Starting existing container ${CONTAINER_NAME}..."
                bat "docker start ${CONTAINER_NAME}"
                sleep time: 50, unit: 'SECONDS'
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello/playwright') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npx playwright test'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "Stopping container ${CONTAINER_NAME}..."
                bat "docker stop ${CONTAINER_NAME}"
            }
        }

        stage('Deploy to Production Container') {
            steps {
                echo "Deploying production container on port ${PROD_PORT}..."
                dir('spring-hello') {
                    bat """
                        docker build -t ${IMAGE_NAME}:prod .
                        docker rm -f ${PROD_CONTAINER_NAME} || exit 0
                        docker run -d --name ${PROD_CONTAINER_NAME} -p ${PROD_PORT}:8080 ${IMAGE_NAME}:prod
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline passed: Tests succeeded and production deployed on port ${PROD_PORT}."
        }
        failure {
            echo "‚ùå Pipeline failed: One or more stages failed."
            bat "docker stop ${CONTAINER_NAME} || exit 0"
        }
        always {
            echo 'üì¶ CI/CD pipeline completed.'
        }
    }
}
