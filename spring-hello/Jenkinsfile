pipeline {
    agent any

    environment {
        APP_NAME = 'spring-hello'
        JAR_NAME = 'springboot-ci-demo-0.0.1-SNAPSHOT.jar'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
        INTERNAL_PORT = '8086'
        TEST_CONTAINER = "${APP_NAME}-container"
        PROD_CONTAINER = "${APP_NAME}-prod"
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat "mvn clean package -DskipTests"
                }
            }
        }

        stage('Start Test Container') {
            steps {
                echo "Starting test container ${TEST_CONTAINER} on port ${TEST_PORT}..."
                dir('spring-hello') {
                    script {
                        def imageName = "${APP_NAME}-image"
                        bat "docker build -t ${imageName} ."
                        bat "docker rm -f ${TEST_CONTAINER} || exit 0"
                        bat "docker run -d --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} ${imageName}"
                    }
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    bat 'npm ci'
                }
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello') {
                    bat 'npx playwright test'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker stop ${TEST_CONTAINER} || exit 0"
                bat "docker rm ${TEST_CONTAINER} || exit 0"
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "Deploying to production container ${PROD_CONTAINER} on port ${PROD_PORT}..."
                dir('spring-hello') {
                    script {
                        def imageName = "${APP_NAME}-image"
                        bat "docker rm -f ${PROD_CONTAINER} || exit 0"
                        bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} ${imageName}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üì¶ CI/CD Pipeline completed."
        }
        failure {
            echo "‚ùå Pipeline failed: Tests failed or deployment error."
            echo "‚õî Cleaning up test container..."
            bat "docker stop ${TEST_CONTAINER} || exit 0"
            bat "docker rm ${TEST_CONTAINER} || exit 0"
        }
    }
}
