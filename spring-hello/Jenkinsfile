pipeline {
    agent any

    environment {
        TEST_CONTAINER = 'spring-hello-container'
        PROD_CONTAINER = 'spring-prod-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                echo "üß™ Checking and starting test container..."
                script {
                    def containerId = bat(script: "docker ps -a -q -f name=${TEST_CONTAINER}", returnStdout: true).trim()
                    if (containerId) {
                        echo "‚úÖ Test container exists. Starting it..."
                        bat "docker start ${TEST_CONTAINER}"
                    } else {
                        echo "‚öôÔ∏è Building image and creating new test container..."
                        dir('spring-hello') {
                            bat "docker build -t spring-hello:latest ."
                        }
                        bat "docker create --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} spring-hello:latest"
                        bat "docker start ${TEST_CONTAINER}"
                    }
                    sleep time: 20, unit: 'SECONDS'
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                dir('spring-hello') {
                    bat 'npm test'
                }
            }
        }

        stage('Verify Test Report') {
            steps {
                echo "üìä Verifying Playwright test results..."
                script {
                    def result = bat(script: 'groovy spring-hello/playwright-tests/verifyTestResults.groovy', returnStatus: true)
                    if (result != 0) {
                        error("‚ùå Tests failed. Deployment to production aborted.")
                    }
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "üõë Stopping test container..."
                script {
                    def exists = bat(script: "docker ps -a -q -f name=${TEST_CONTAINER}", returnStdout: true).trim()
                    if (exists) {
                        bat "docker stop ${TEST_CONTAINER}"
                    } else {
                        echo "No test container found."
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "üöÄ Deploying to production container on port ${PROD_PORT}..."
                script {
                    def exists = bat(script: "docker ps -a -q -f name=${PROD_CONTAINER}", returnStdout: true).trim()
                    if (exists) {
                        echo "‚ôªÔ∏è Removing existing production container..."
                        bat "docker stop ${PROD_CONTAINER}"
                        bat "docker rm ${PROD_CONTAINER}"
                    }
                }
                bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} spring-hello:latest"
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline success! App deployed to production on port ${PROD_PORT}."
        }
        failure {
            echo "‚ùå Pipeline failed. Cleaning up test container if it exists..."
            script {
                def exists = bat(script: "docker ps -a -q -f name=${TEST_CONTAINER}", returnStdout: true).trim()
                if (exists) {
                    bat "docker stop ${TEST_CONTAINER}"
                }
            }
        }
        always {
            echo 'üì¶ CI/CD pipeline execution complete.'
        }
    }
}
