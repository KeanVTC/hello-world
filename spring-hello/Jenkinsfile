pipeline {
    agent any
    environment {
        IMAGE_NAME = 'spring-hello-image'
        CONTAINER_NAME = 'spring-hello-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '8086'
        PROD_PORT = '9090'
        REPORT_PATH = 'spring-hello/playwright-tests/playwright-report'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/KeanVTC/hello-world.git', branch: 'main'
            }
        }

        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('spring-hello') {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Run Test Container') {
            steps {
                bat "docker run -d --name ${CONTAINER_NAME} -p ${TEST_PORT}:${INTERNAL_PORT} ${IMAGE_NAME}"
                sleep(time: 10, unit: "SECONDS") // wait for app to boot
            }
        }

        stage('Health Check') {
            steps {
                script {
                    def response = bat(script: "curl -s -o nul -w \"%{http_code}\" http://localhost:${TEST_PORT}", returnStdout: true).trim()
                    if (response != "200") {
                        error "Health check failed. Got HTTP ${response}"
                    }
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run Playwright Tests') {
            steps {
                dir('spring-hello') {
                    bat 'npx playwright test'
                }
            }
        }

        stage('Publish Playwright Report') {
            steps {
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "${REPORT_PATH}",
                    reportFiles: 'index.html',
                    reportName: 'Playwright Test Report'
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker stop ${CONTAINER_NAME} || exit 0"
                bat "docker rm ${CONTAINER_NAME} || exit 0"
            }
        }

        stage('Deploy to Production') {
            steps {
                bat "docker run -d --name ${CONTAINER_NAME} -p ${PROD_PORT}:${INTERNAL_PORT} ${IMAGE_NAME}"
            }
        }
    }

    post {
        failure {
            echo "❌ Pipeline failed. Cleaning up..."
            bat "docker stop ${CONTAINER_NAME} || exit 0"
            bat "docker rm ${CONTAINER_NAME} || exit 0"
        }
        success {
            echo "✅ Pipeline completed successfully!"
        }
    }
}
