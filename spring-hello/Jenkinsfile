pipeline {
    agent any

    environment {
        TEST_CONTAINER = 'spring-hello-container'
        PROD_CONTAINER = 'spring-prod-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    echo "üì¶ Building Spring Boot application..."
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                script {
                    echo "üê≥ Starting test container ${TEST_CONTAINER}..."
                    def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker start ${TEST_CONTAINER}"
                        echo "‚úÖ Reused existing test container."
                    } else {
                        dir('spring-hello') {
                            echo "üì¶ Building Docker image..."
                            bat "docker build -t spring-hello:latest ."
                        }
                        bat "docker create --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} spring-hello:latest"
                        bat "docker start ${TEST_CONTAINER}"
                        echo "üöÄ New test container started."
                    }
                    sleep time: 20, unit: 'SECONDS'
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    echo "üß™ Installing Playwright..."
                    bat 'npm ci'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Tests') {
            steps {
                dir('spring-hello/playwright-tests') {
                    echo "üö¶ Running Playwright E2E tests..."
                    // Ensure fresh report
                    bat 'rmdir /s /q playwright-report'
                    bat 'npx playwright test --reporter=html'
                }
            }
        }

        stage('Publish HTML Report to Jenkins') {
            steps {
                echo "üìä Publishing Playwright test report to Jenkins (optional fallback)..."
                script {
                    def reportExists = fileExists('spring-hello/playwright-tests/playwright-report/index.html')
                    if (!reportExists) {
                        error("‚ùå Playwright report not found. Check test execution.")
                    }
                }
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'spring-hello/playwright-tests/playwright-report',
                    reportFiles: 'index.html',
                    reportName: 'Playwright E2E Test Report',
                    reportTitles: 'Playwright Test Results'
                ])
            }
        }

        stage('Open Playwright Report Locally') {
            steps {
                dir('spring-hello/playwright-tests') {
                    echo "üåê Opening Playwright report in local browser..."
                    bat 'npx playwright show-report'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "üõë Stopping test container..."
                script {
                    def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker stop ${TEST_CONTAINER}"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "üöÄ Deploying to production..."
                script {
                    def exists = bat(script: "docker inspect --type container ${PROD_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker stop ${PROD_CONTAINER}"
                        bat "docker rm ${PROD_CONTAINER}"
                    }
                    bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} spring-hello:latest"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline SUCCESS: App deployed to port ${PROD_PORT}."
        }
        failure {
            echo "‚ùå Pipeline FAILED. Cleaning up test container..."
            script {
                def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                if (exists == 0) {
                    bat "docker stop ${TEST_CONTAINER}"
                }
            }
        }
        always {
            echo 'üì¶ CI/CD Pipeline finished.'
        }
    }
}
