pipeline {
    agent any

    environment {
        IMAGE_NAME = 'spring-hello:latest'
        CONTAINER_NAME = 'spring-hello-container'
        TEST_PORT_MAPPING = '9090:8086'
        REPORT_DIR = 'spring-hello/playwright-tests/playwright-report'
    }

    stages {
        stage('Build Maven App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('spring-hello') {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Run Test Container') {
            steps {
                bat "docker run -d --name ${CONTAINER_NAME} -p ${TEST_PORT_MAPPING} ${IMAGE_NAME}"
                sleep time: 20, unit: 'SECONDS'
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run Playwright E2E Tests') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npx playwright test'
                }
            }
        }

        stage('Publish Playwright Report') {
            steps {
                publishHTML(target: [
                    reportDir: "${REPORT_DIR}",
                    reportFiles: 'index.html',
                    reportName: 'Playwright Test Report',
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                bat "docker stop ${CONTAINER_NAME}"
                bat "docker rm ${CONTAINER_NAME}"
            }
        }

        stage('Deploy to Production') {
            steps {
                echo '✅ Tests passed. Proceeding to production deployment...'
                // Add your production deployment steps here
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline failed. Cleaning up test container...'
            bat "docker stop ${CONTAINER_NAME} || exit 0"
            bat "docker rm ${CONTAINER_NAME} || exit 0"
        }
    }
}
