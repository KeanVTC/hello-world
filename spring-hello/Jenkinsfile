pipeline {
    agent any

    environment {
        TEST_CONTAINER = 'spring-hello-container'
        PROD_CONTAINER = 'spring-prod-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
        BASE_TEST_URL = "http://localhost:${TEST_PORT}"
        BASE_PROD_URL = "http://localhost:${PROD_PORT}"
        REPORT_DIR = 'spring-hello/playwright-tests/playwright-report'
        CSV_TITLES_PATH = 'spring-hello/playwright-tests/data/report_titles.csv'
    }

    // Helper function to read CSV and get report title by env name
    def getReportTitle(envName) {
        def csvFile = "${env.WORKSPACE}/${CSV_TITLES_PATH}"
        def title = ""

        if (!fileExists(csvFile)) {
            error "CSV file with report titles not found at ${csvFile}"
        }

        def lines = readFile(csvFile).split('\n')
        def headers = lines[0].split(',')

        def envIndex = headers.findIndexOf { it.trim() == "env" }
        def titleIndex = headers.findIndexOf { it.trim() == "report_title" }

        for (int i = 1; i < lines.size(); i++) {
            def cols = lines[i].split(',')
            if (cols[envIndex].trim() == envName) {
                title = cols[titleIndex].trim()
                break
            }
        }

        if (title == "") {
            error "No report title found for environment '${envName}' in CSV."
        }

        return title
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    echo "üì¶ Building Spring Boot application..."
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                script {
                    echo "üê≥ Starting test container..."
                    def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker start ${TEST_CONTAINER}"
                        echo "‚úÖ Reused existing test container."
                    } else {
                        dir('spring-hello') {
                            bat "docker build -t spring-hello:latest ."
                        }
                        bat "docker create --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} spring-hello:latest"
                        bat "docker start ${TEST_CONTAINER}"
                        echo "üöÄ New test container started."
                    }
                    sleep time: 20, unit: 'SECONDS'
                }
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello') {
                    echo "üß™ Installing Playwright..."
                    bat 'npm ci'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Tests (Test Container)') {
            steps {
                dir('spring-hello/playwright-tests') {
                    echo "üö¶ Running Playwright E2E tests (Test)..."
                    script {
                        def title = getReportTitle("test")
                        env.REPORT_TITLE = title
                        def testStatus = bat(
                            script: """
                                set BASE_URL=${env.BASE_TEST_URL}
                                set REPORT_TITLE=${env.REPORT_TITLE}
                                npx playwright test --project=chromium --project=firefox --project=webkit
                            """,
                            returnStatus: true
                        )
                        if (testStatus != 0) {
                            echo "‚ö†Ô∏è Playwright test against test container FAILED with exit code ${testStatus}"
                            currentBuild.result = 'UNSTABLE'
                        } else {
                            echo "‚úÖ Playwright test against test container PASSED."
                        }
                    }
                }
            }
        }

        stage('Create Report Wrapper (Test)') {
            steps {
                script {
                    def title = getReportTitle("test")
                    def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss")
                    def wrapperContent = """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>${title}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    p {
      text-align: center;
      font-style: italic;
      color: #555;
    }
    iframe {
      width: 100%;
      height: 90vh;
      border: 1px solid #ccc;
    }
  </style>
</head>
<body>
  <h1>${title}</h1>
  <p>Test run timestamp: ${timestamp}</p>
  <iframe src="index.html" frameborder="0"></iframe>
</body>
</html>
"""
                    writeFile file: "${env.REPORT_DIR}/wrapper.html", text: wrapperContent
                    echo "‚úÖ wrapper.html created in ${env.REPORT_DIR}"
                }
            }
        }

        stage('Archive Test Report') {
            steps {
                script {
                    echo "üìÇ Archiving Test container report..."
                    def ts = new Date().format("yyyyMMdd-HHmmss")
                    bat "xcopy /E /I \"${REPORT_DIR}\" \"spring-hello/playwright-tests/playwright-report-test-${ts}\""
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                echo "üìä Publishing Playwright test report (Test)..."
                publishHTML(target: [
                    reportDir: "${REPORT_DIR}",
                    reportFiles: 'wrapper.html',
                    reportName: "Playwright E2E Report - Test Container",
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "üõë Stopping test container..."
                script {
                    def exists = bat(script: "docker inspect --type container ${TEST_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker stop ${TEST_CONTAINER}"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "üöÄ Deploying to production..."
                script {
                    def exists = bat(script: "docker inspect --type container ${PROD_CONTAINER}", returnStatus: true)
                    if (exists == 0) {
                        bat "docker stop ${PROD_CONTAINER}"
                        bat "docker rm ${PROD_CONTAINER}"
                    }
                    bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} spring-hello:latest"
                    sleep time: 15, unit: 'SECONDS'
                }
            }
        }

        stage('Run E2E Tests (Production)') {
            steps {
                dir('spring-hello/playwright-tests') {
                    echo "üö¶ Running Playwright E2E tests (Production)..."
                    script {
                        def title = getReportTitle("prod")
                        env.REPORT_TITLE = title
                        def prodTestStatus = bat(
                            script: """
                                set BASE_URL=${env.BASE_PROD_URL}
                                set REPORT_TITLE=${env.REPORT_TITLE}
                                npx playwright test --project=chromium --project=firefox --project=webkit
                            """,
                            returnStatus: true
                        )
                        if (prodTestStatus != 0) {
                            echo "‚ö†Ô∏è Playwright test against production FAILED with exit code ${prodTestStatus}"
                            currentBuild.result = 'UNSTABLE'
                        } else {
                            echo "‚úÖ Playwright test against production PASSED."
                        }
                    }
                }
            }
        }

        stage('Create Report Wrapper (Production)') {
            steps {
                script {
                    def title = getReportTitle("prod")
                    def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss")
                    def wrapperContent = """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>${title}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    p {
      text-align: center;
      font-style: italic;
      color: #555;
    }
    iframe {
      width: 100%;
      height: 90vh;
      border: 1px solid #ccc;
    }
  </style>
</head>
<body>
  <h1>${title}</h1>
  <p>Test run timestamp: ${timestamp}</p>
  <iframe src="index.html" frameborder="0"></iframe>
</body>
</html>
"""
                    writeFile file: "${env.REPORT_DIR}/wrapper.html", text: wrapperContent
                    echo "‚úÖ wrapper.html created in ${env.REPORT_DIR}"
                }
            }
        }

        stage('Archive Production Report') {
            steps {
                script {
                    echo "üìÇ Archiving Production report..."
                    def ts = new Date().format("yyyyMMdd-HHmmss")
                    bat "xcopy /E /I \"${REPORT_DIR}\" \"spring-hello/playwright-tests/playwright-report-prod-${ts}\""
                }
            }
        }

        stage('Publish Production Report') {
            steps {
                echo "üìä Publishing Playwright test report (Production)..."
                publishHTML(target: [
                    reportDir: "${REPORT_DIR}",
                    reportFiles: 'wrapper.html',
                    reportName: "Playwright E2E Report - Production",
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline SUCCESS: App deployed and E2E tested."
        }
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with test failures (UNSTABLE). Reports published."
        }
        failure {
            echo "‚ùå Pipeline FAILED due to other errors."
        }
        always {
            echo 'üì¶ CI/CD pipeline complete.'
        }
    }
}
