pipeline {
    agent any

    environment {
        TEST_CONTAINER = 'spring-hello-container'
        PROD_CONTAINER = 'spring-prod-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
    }

    stages {
        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                echo "Starting test container ${TEST_CONTAINER} on port ${TEST_PORT}..."
                bat "docker start ${TEST_CONTAINER}"
                sleep time: 50, unit: 'SECONDS'
            }
        }

        stage('Install Playwright') {
            steps {
                dir('spring-hello/playwright') {
                    bat 'npm install'
                    bat 'npx playwright install'
                }
            }
        }

        stage('Run E2E Test') {
            steps {
                dir('spring-hello/playwright-tests') {
                    bat 'npx playwright test'
                }
            }
        }

        stage('Stop Test Container') {
            steps {
                echo "Stopping test container ${TEST_CONTAINER}..."
                bat "docker stop ${TEST_CONTAINER}"
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "Deploying to production container ${PROD_CONTAINER} (port ${PROD_PORT}:${INTERNAL_PORT})..."
                script {
                    def containerExists = bat(script: "docker ps -a -q -f name=${PROD_CONTAINER}", returnStdout: true).trim()
                    if (containerExists) {
                        bat "docker stop ${PROD_CONTAINER}"
                        bat "docker rm ${PROD_CONTAINER}"
                    }
                }
                bat "docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} spring-hello:latest"
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline passed: Tests succeeded and app deployed to port ${PROD_PORT}."
        }
        failure {
            echo "‚ùå Pipeline failed: Tests failed or deployment error."
            echo "‚õî Cleaning up test container..."
            bat "docker stop ${TEST_CONTAINER}" // Safe even if already stopped
        }
        always {
            echo 'üì¶ CI/CD Pipeline completed.'
        }
    }
}
