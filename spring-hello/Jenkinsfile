pipeline {
  agent any

  environment {
    IMAGE_NAME = "spring-hello"
    CONTAINER_NAME = "spring-hello-container"
    HOST_PORT = "9090"
    CONTAINER_PORT = "8086"
    BASE_URL = "http://localhost:${HOST_PORT}"
  }

  stages {
    stage('Checkout') {
      steps {
        git 'https://github.com/KeanVTC/springboot-ci-demo'
      }
    }

    stage('Build with Maven') {
      steps {
        dir('spring-hello') {
          bat 'mvn clean package'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('spring-hello') {
          bat "docker build -t ${IMAGE_NAME} ."
        }
      }
    }

    stage('Run Test Container') {
      steps {
        bat "docker run -d --rm -p ${HOST_PORT}:${CONTAINER_PORT} --name ${CONTAINER_NAME} ${IMAGE_NAME}"
        sleep time: 10, unit: 'SECONDS' // wait for app to start
      }
    }

    stage('Run E2E Test') {
      steps {
        dir('spring-hello') {
          withEnv(["BASE_URL=${BASE_URL}"]) {
            bat 'npm install'
            bat 'npm test'
          }
        }
      }
    }

    stage('Verify Test Report') {
      steps {
        script {
          def reportFile = "spring-hello/playwright-report/index.html"
          if (!fileExists(reportFile)) {
            error "‚ùå Test report not found!"
          }
          echo "‚úÖ Test report generated: ${reportFile}"
        }
      }
    }

    stage('Stop Test Container') {
      steps {
        bat "docker stop ${CONTAINER_NAME}"
      }
    }

    stage('Deploy to Production') {
      steps {
        echo "üöÄ Deploying to production container..."
        // Add your actual production deployment logic here
      }
    }
  }

  post {
    always {
      echo 'üì¶ CI/CD Pipeline completed.'
      echo currentBuild.result == 'SUCCESS' ? '‚úÖ Pipeline succeeded.' : '‚ùå Pipeline failed: Tests failed or deployment error.'
      echo '‚õî Cleaning up test container (if running)...'
      script {
        bat "docker stop ${CONTAINER_NAME} || exit 0"
      }
    }
  }
}
