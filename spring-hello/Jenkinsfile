pipeline {
    agent any

    environment {
        TEST_CONTAINER = 'spring-hello-container'
        PROD_CONTAINER = 'spring-prod-container'
        INTERNAL_PORT = '8086'
        TEST_PORT = '9090'
        PROD_PORT = '9091'
        BASE_TEST_URL = "http://localhost:${TEST_PORT}"
        BASE_PROD_URL = "http://localhost:${PROD_PORT}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Spring Boot App') {
            steps {
                dir('spring-hello') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Start Test Container') {
            steps {
                script {
                    bat """
                        docker stop ${TEST_CONTAINER} || exit 0
                        docker rm ${TEST_CONTAINER} || exit 0
                        docker build -t spring-hello-image spring-hello
                        docker run -d --name ${TEST_CONTAINER} -p ${TEST_PORT}:${INTERNAL_PORT} spring-hello-image
                        timeout /t 15
                    """
                }
            }
        }

        stage('Run E2E Tests (Test Container)') {
            steps {
                dir('spring-hello/playwright-tests') {
                    echo "üö¶ Running Playwright E2E tests (Test)..."
                    script {
                        def testStatus = bat(
                            script: """
                                set BASE_URL=${env.BASE_TEST_URL}
                                npm ci
                                npx playwright install --with-deps
                                npx playwright test --reporter=html --project=chromium
                            """,
                            returnStatus: true
                        )
                        if (testStatus != 0) {
                            error("‚ùå Playwright test against test container failed.")
                        }

                        bat 'rmdir /s /q playwright-report-test || exit 0'
                        bat 'xcopy /E /Y playwright-report playwright-report-test'
                    }
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                echo "üìä Publishing test report (Test)..."
                publishHTML(target: [
                    reportDir: 'spring-hello/playwright-tests/playwright-report-test',
                    reportFiles: 'index.html',
                    reportName: 'Playwright E2E Report (Test)',
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }

        stage('Stop Test Container') {
            steps {
                bat """
                    docker stop ${TEST_CONTAINER}
                    docker rm ${TEST_CONTAINER}
                """
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    bat """
                        docker stop ${PROD_CONTAINER} || exit 0
                        docker rm ${PROD_CONTAINER} || exit 0
                        docker run -d --name ${PROD_CONTAINER} -p ${PROD_PORT}:${INTERNAL_PORT} spring-hello-image
                        timeout /t 15
                    """
                }
            }
        }

        stage('Run E2E Tests (Production)') {
            steps {
                dir('spring-hello/playwright-tests') {
                    echo "üö¶ Running Playwright E2E tests (Production)..."
                    script {
                        def prodStatus = bat(
                            script: """
                                set BASE_URL=${env.BASE_PROD_URL}
                                npx playwright test --reporter=html --project=chromium
                            """,
                            returnStatus: true
                        )
                        if (prodStatus != 0) {
                            error("‚ùå Playwright test against production failed.")
                        }

                        bat 'rmdir /s /q playwright-report-prod || exit 0'
                        bat 'xcopy /E /Y playwright-report playwright-report-prod'
                    }
                }
            }
        }

        stage('Publish Test Report (Production)') {
            steps {
                echo "üìä Publishing test report (Production)..."
                publishHTML(target: [
                    reportDir: 'spring-hello/playwright-tests/playwright-report-prod',
                    reportFiles: 'index.html',
                    reportName: 'Playwright E2E Report (Production)',
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up containers..."
            bat """
                docker stop ${TEST_CONTAINER} || exit 0
                docker rm ${TEST_CONTAINER} || exit 0
                docker stop ${PROD_CONTAINER} || exit 0
                docker rm ${PROD_CONTAINER} || exit 0
            """
        }
    }
}
